{"version":3,"sources":["../src/di.ts","../src/index.ts","main.ts"],"names":[],"mappings":";AAmBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjBA,MAAM,EAAI,IAAI,IAER,EAAS,GAAc,EAAE,WAAW,GAEpC,EAAgB,MACjB,IACA,MAAM,IACN,IAAI,GACJ,KAAK,IACL,UAAU,EAAG,IAQlB,SAAgB,EAAU,GACjB,MAAA,CAAC,EAAQ,IACd,OAAO,eAAe,EAAQ,EAAM,CAClC,IAAK,IAAM,QAAA,IAAI,KATR,QAAA,IAAU,CAAA,GAAwB,EAAE,IAAI,EAAU,KAClD,QAAA,IAAU,CAAA,KAAgC,EAAE,IAAI,EAAU,KAC1D,QAAA,IAAM,EAAI,EAAkB,EAAO,EAAU,KACxD,EAAE,IAAI,EAAM,IAAI,GAAK,IAAI,IACd,QAAA,MAAQ,KAAM,EAAE,SAE7B,QAAA,OAAA;;ACnBA,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,EAAA,QAAA;;ACoBA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IApBA,MAAA,EAAA,QAAA,gBAEA,MAAa,EAAb,cACE,KAAA,MAAQ,sBADV,QAAA,UAAA,EAIA,MAAa,GAEX,EAAA,CADC,EAAA,OAAO,GACM,EAAA,cAAA,IAAd,EAAA,UAAA,aAAA,GAFF,QAAA,YAAA,EAKA,MAAM,EAIJ,WACS,OAAA,KAAK,YAAY,MAAM,OAHhC,EAAA,CADC,EAAA,OAAO,GACa,EAAA,cAAA,IAArB,EAAA,UAAA,mBAAA,GAMF,MAAM,EAAQ,EAAA,IAAI,GAClB,QAAQ,IAAI","file":"main.js","sourceRoot":"../example","sourcesContent":["type ObjectType<T> = new (...args: unknown[]) => T;\n\nconst C = new Map();\n\nconst ascii = (a: string) => a.charCodeAt(0);\n\nconst toHashKey = <T>(c: ObjectType<T>) =>\n  `${c}`\n    .split('')\n    .map(ascii)\n    .join('')\n    .substring(0, 50);\n\nexport const get = <T>(c: ObjectType<T>): T => C.get(toHashKey(c));\nexport const has = <T>(c: ObjectType<T>): boolean => !!C.has(toHashKey(c));\nexport const set = <T>(c: ObjectType<T>, hash = toHashKey(c)): T =>\n  C.set(hash, new c()).get(hash);\nexport const clear = () => C.clear();\n\nexport function Inject<T>(clazz: ObjectType<T>): PropertyDecorator {\n  return (target, name: string) =>\n    Object.defineProperty(target, name, {\n      get: () => set(clazz)\n    });\n}\n","export * from './di';\n","import { Inject, set } from '../src/index';\n\nexport class UserCache {\n  pesho = '[UserCache]: pesho';\n}\n\nexport class UserService {\n  @Inject(UserCache)\n  public cache: UserCache;\n}\n\nclass App {\n  @Inject(UserService)\n  private userService: UserService;\n\n  getPesho() {\n    return this.userService.cache.pesho;\n  }\n}\nconst pav4e = set(App);\nconsole.log(pav4e);\n"]}